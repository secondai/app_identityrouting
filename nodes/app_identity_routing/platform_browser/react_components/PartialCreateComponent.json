{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "PartialCreateComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "2",
    "key": "0c557afd-6488-42f4-aa4a-e03256985329",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      /// setup stellar connection \n      let horizonPossible = {\n        public: {\n          name: 'PubNet',\n          address: 'https://horizon.stellar.org',\n          network: 'public'\n        },\n        test: {\n          name: 'TestNet',\n          address: 'https://horizon-testnet.stellar.org',\n          network: 'test'\n        }\n      };\n    \n      let stellarInfo = horizonPossible.test;\n      switch(stellarInfo.network){\n        case 'public':\n          universe.StellarSdk.Network.usePublicNetwork();\n          break;\n        case 'test':\n          universe.StellarSdk.Network.useTestNetwork();\n          break;\n        default:\n          break;\n      }\n      \n      let stellarServer = new universe.StellarSdk.Server(stellarInfo.address);\n      \n      let fundingBalance = \"5.0\";\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {\n            username: '', // will be normalized\n            inviteCode: '',\n            statusMsg: '',\n            claimingInvite: false\n          }\n          \n        }\n        \n        @autobind\n        handleKeyDown(e){\n          if(e.key && e.key.toLowerCase() == 'enter'){\n            this.processAcceptInvite();\n          } \n        }\n        \n        @autobind\n        handlePurchaseClick(){\n          WINDOW.alert('Purchase link here');\n        }\n        \n        @autobind\n        handleAcceptClick(){\n          this.processAcceptInvite();\n        }\n        \n        @autobind\n        processAcceptInvite(){\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            if(this.state.claimingInvite){\n              return resolve(false);\n            }\n            \n            this.setState({\n              claimingInvite: true\n            });\n            \n            \n            // see if username is available \n            let username = this.state.username.normalize('NFKC').toLowerCase();\n          \n            let userTargetSeed = universe.jsSHA256.array(username);\n            var pairUsername = universe.StellarSdk.Keypair.fromRawEd25519Seed(userTargetSeed);\n        \n            \n            this.setState({\n              statusMsg: 'Checking Availability'\n            });\n            \n            // Load source account\n            let usernameAccount;\n            try {\n              usernameAccount = await stellarServer.loadAccount(pairUsername.publicKey())\n              console.error('Failed loading username account, good!');\n              // WINDOW.alert('Username already taken');\n              \n              // TODO: lookup purchase or rentlink/contract \n              \n              this.setState({\n                statusMsg: 'Username already taken (no purchase link)',\n                claimingInvite: false\n              });\n              return;\n            }catch(err){\n              console.log('Failed loading username account, good!');\n            }\n            \n            \n            // target account for passphrase \n            var passphraseKeypair = universe.StellarSdk.Keypair.random(); \n            \n            let pubKey = passphraseKeypair.publicKey();\n            let secretKey = passphraseKeypair.secret();\n            \n              this.setState({\n                statusMsg: 'Accepting Invite'\n              });\n              \n            // accept invite (POST to /accept-invite) \n            // - body: data.inviteCode \n            // - response should be a node w/ data.passphrase \n            let url = \n            universe.fetch('/accept-invite',{\n              method: 'POST',\n              headers: {\n                  \"Content-Type\": \"application/json; charset=utf-8\",\n              },\n              body: JSON.stringify({\n                inviteCode: this.state.inviteCode,\n                address: pubKey\n              })\n            })\n            .then(response=>{\n              console.log('Response1:', response);\n              if(response.status == 200){\n                return response;\n              }\n              // failed!\n              console.error('failed!', respones);\n              \n              this.setState({\n                statusMsg: 'Failed accepting invite',\n                claimingInvite: false\n              });\n              \n            })\n            .then(response=>response.json())\n            .then(async (response)=>{\n              console.log('Response:', response);\n              \n              // Succeeded in creating ownership account for us to reserve the username \n              // - NOT creatinig username on server, just accepting the invite for controller account \n              //   - prevents passphrase from needing to go to the server (just send the pubkey!) \n              \n              if(response.data.success != true){\n                console.error('Failed:', response.data);\n                \n                this.setState({\n                  statusMsg: 'Failed accepting invite. Please try again',\n                  claimingInvite: false\n                });\n                \n                return false;\n              }\n              \n              // populated the address, now claim the username! \n              \n              \n              // Insert Node \n              let newNode = {\n                type: 'username_passphrase:Qm3298f',\n                data: {\n                  username: username,\n                  passphrase: secretKey\n                }\n              };\n              this.setState({newNode}, this.claimUsername)\n              \n            })\n            .catch(err=>{\n              console.error('Failed Response', err);\n              \n              this.setState({\n                statusMsg: 'Unable to accept invite code, please try again',\n                claimingInvite: false\n              });\n              \n              \n            })\n        \n            \n              \n            // this.setState({\n            //   renderMain: true\n            // });\n            \n          });\n          \n        }\n      \n        @autobind\n        async claimUsername(){\n          // sets up the identity\n          // - assuming NOT setup at all yet \n          // - error if already created \n      \n          // also sets up multi-sig control over data! \n          \n              \n          let username = this.state.newNode.data.username;\n          let passphrase = this.state.newNode.data.passphrase;\n      \n          // validate stellar seed \n          // - an account with enough Lumens in it \n      \n          this.setState({\n            claimingInvite: true // probably already true! \n          });\n      \n          var pairSource = universe.StellarSdk.Keypair.fromSecret(passphrase);\n      \n          let errors = [];\n      \n          this.setState({\n            statusMsg: 'Rechecking Username and Invite Account'\n          });\n          \n          // Load source account\n          let sourceAccount;\n          try {\n            sourceAccount = await stellarServer.loadAccount(pairSource.publicKey())\n          }catch(err){\n            // problem with account \n            // WINDOW.alert('The seed stellar account does not exist!');\n      \n            this.setState({\n              statusMsg: 'Failed creating account, please try again',\n              claimingInvite: false\n            });\n            return false;\n          }\n      \n          // get source balance \n          if(sourceAccount){\n            let balance = 0;\n            balance = sourceAccount.balances[0].balance;\n      \n            console.log('Balance:', balance);\n      \n            balance = parseFloat(balance);\n            if(balance < parseFloat(fundingBalance)){\n              \n              this.setState({\n                statusMsg: 'Insufficient balance in source account (need 6+ lumens). Please try again',\n                claimingInvite: false\n              });\n      \n              return false;\n            }\n          }\n      \n          // validate that Identity is available (or already owned)\n          // - should be a nonexistant account (or have my sourcePublicKey as a signer) \n          // - TODO: \"rent\" via smart contracts \n      \n          let pkTargetSeed = universe.jsSHA256.array(username);\n          var pairTarget = universe.StellarSdk.Keypair.fromRawEd25519Seed(pkTargetSeed);\n      \n          let targetAccount;\n          try {\n            targetAccount = await stellarServer.loadAccount(pairTarget.publicKey())\n            console.log('targetAccount:', targetAccount);\n            \n            this.setState({\n              statusMsg: 'Username already exists, cant claim',\n              claimingInvite: false\n            });\n      \n            return false;\n          }catch(err){\n      \n          }\n      \n          // Start building the transaction.\n          // - fees: https://www.stellar.org/developers/guides/concepts/fees.html\n          // - starting balance: (2 + # of entries) Ã— base reserve\n          //   - 2 signers (original, my secret) \n          //   - 1 Data entry \n          let transaction = new universe.StellarSdk.TransactionBuilder(sourceAccount)\n          .addOperation(universe.StellarSdk.Operation.createAccount({\n            destination: pairTarget.publicKey(),\n            startingBalance: fundingBalance // 2.5 is required, 2.5 extra for manageData entries (allows for 4 entries? second, nodechain, ...) \n            // source: pair\n          }))\n      \n          // A memo allows you to add your own metadata to a transaction. It's\n          // optional and does not affect how Stellar treats the transaction.\n          // .addMemo(StellarSdk.Memo.text('Qmf4437bCR2cwwpPh6dChwMSe5wuLJz32caf2aZP3xxtNR'))\n          // .addMemo(StellarSdk.Memo.hash(b32))\n          .build();\n      \n          // Sign the transaction to prove you are actually the person sending it.\n          transaction.sign(pairSource); // sourceKeys\n      \n          // send to stellar network\n          let stellarResult = await stellarServer.submitTransaction(transaction)\n          .then(function(result) {\n            console.log('Stellar Success! Results:', result);\n            return result;\n          })\n          .catch(function(error) {\n            console.error('Stellar Something went wrong!', error);\n            // If the result is unknown (no response body, timeout etc.) we simply resubmit\n            // already built transaction:\n            // server.submitTransaction(transaction);\n            \n            return null;\n          });\n      \n          console.log('stellarResult', stellarResult);\n          if(!stellarResult){\n            // WINDOW.alert('Failed claiming account');\n      \n            this.setState({\n              statusMsg: 'Failed claiming account at funding stage',\n              claimingInvite: false\n            });\n      \n            return false;\n          }\n      \n      \n          targetAccount = await stellarServer.loadAccount(pairTarget.publicKey())\n      \n          // Add multisig \n          console.log('adding multisig', targetAccount);\n      \n          // set multi-sig on this account \n          // - will fail if I am unable to \"claim\" \n      \n          // Start building the transaction.\n          let transaction2 = new universe.StellarSdk.TransactionBuilder(targetAccount)\n      \n          // .addOperation(universe.StellarSdk.Operation.manageData({\n          //   name: '|second',\n          //   value: '-'\n          // }))\n      \n          .addOperation(universe.StellarSdk.Operation.setOptions({\n            signer: {\n              ed25519PublicKey: pairSource.publicKey(),\n              weight: 1\n            }\n          }))\n          .addOperation(universe.StellarSdk.Operation.setOptions({\n            masterWeight: 1, // set master key weight (should really be nothing, and controlled by this other key?) \n            lowThreshold: 2, // trustlines\n            medThreshold: 2, // manageData\n            highThreshold: 2  // setOptions (multi-sig)\n          }))\n          .build();\n      \n          // Sign the transaction to prove you are actually the person sending it.\n          transaction2.sign(pairTarget); // sourceKeys\n          // transaction2.sign(pairSource); // sourceKeys\n      \n          // send to stellar network\n          let stellarResult2 = await stellarServer.submitTransaction(transaction2)\n          .then(function(result) {\n            console.log('Stellar MultiSig Setup Success! Results:', result);\n            return result\n          })\n          .catch(function(error) {\n            console.error('Stellar Something went wrong (failed multisig)!', error);\n            // If the result is unknown (no response body, timeout etc.) we simply resubmit\n            // already built transaction:\n            // server.submitTransaction(transaction);\n            return null;\n          });\n      \n          console.log('Multisig result:', stellarResult2);\n      \n          if(!stellarResult2){\n            // WINDOW.alert('Failed multisig setup');\n      \n            this.setState({\n              statusMsg: 'Failed claiming username at multisig setup',\n              claimingInvite: false\n            });\n      \n            return false;\n          }\n      \n          // WINDOW.alert('Claimed Username');\n          this.setState({\n            statusMsg: 'Claimed Username, Saving'\n          });\n      \n          // // re-run validation (to verify changes worked!) \n          // await this.validate();\n    \n      \n          await universe.newNode(this.state.newNode);\n          \n          this.setState({\n            claimingInvite: false,\n          });\n          \n          try {\n            universe.EE.emit('recheck-login', '');\n          }catch(err){\n            console.error('recheck login failed:', err);\n          }\n      \n          return true;\n      \n        }\n        \n        @autobind\n        render(){\n        \n          return (\n            <div>\n              \n              <h3 className=\"title is-5\">\n                Create Identity \n              </h3>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" placeholder=\"Username\" value={this.state.username} onChange={e=>this.setState({username:e.target.value})} onKeyDown={this.handleKeyDown} />\n                </div>\n              </div>\n              \n              <div className=\"field\">\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" placeholder=\"Invite Code\" value={this.state.inviteCode} onChange={e=>this.setState({inviteCode:e.target.value})} onKeyDown={this.handleKeyDown} />\n                </div>\n              </div>\n              \n              <div className=\"field\">\n                <div className=\"control\">\n                  <span className={\"button is-info \" + (this.state.claimingInvite ? 'is-loading':'')} onClick={this.handleAcceptClick}>\n                    Accept Invite &amp; Claim Identity\n                  </span>\n                </div>\n              </div>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <a onClick={this.handlePurchaseClick}>\n                    Don't have an invite code? \n                  </a>\n                </div>\n              </div>\n              \n              <div>\n                {this.state.statusMsg}\n              </div>\n              \n            </div>\n          );\n            \n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "PartialCreateComponent"
  }
}