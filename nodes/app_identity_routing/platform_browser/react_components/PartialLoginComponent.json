{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "PartialLoginComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "2",
    "key": "609a5424-b08c-49fe-a23c-ebd6b6fe0da9",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {\n            username: '', // will be normalized\n            passphrase: '',\n            isLoggingIn: false\n          }\n          \n        }\n        \n        @autobind\n        handleKeyDown(e){\n          if(e.key && e.key.toLowerCase() == 'enter'){\n            this.processLogin();\n          } \n        }\n        \n        @autobind\n        handleLoginClick(){\n          this.processLogin();\n        }\n        \n        @autobind\n        async processLogin(){\n          \n          // talk to Stellar \n          console.log('process login');\n          \n          this.setState({\n            isLoggingIn: true\n          });\n          \n          let username = this.state.username.normalize('NFKC').toLowerCase();\n          \n        \n          let horizonPossible = {\n            public: {\n              name: 'PubNet',\n              address: 'https://horizon.stellar.org',\n              network: 'public'\n            },\n            test: {\n              name: 'TestNet',\n              address: 'https://horizon-testnet.stellar.org',\n              network: 'test'\n            }\n          };\n        \n          let stellarInfo = horizonPossible.test;\n          switch(stellarInfo.network){\n            case 'public':\n              universe.StellarSdk.Network.usePublicNetwork();\n              break;\n            case 'test':\n              universe.StellarSdk.Network.useTestNetwork();\n              break;\n            default:\n              break;\n          }\n          \n          \n          let stellarServer = new universe.StellarSdk.Server(stellarInfo.address);\n          \n          \n          // Load source account\n          let sourceAccount;\n          let pairSource;\n          try {\n            pairSource = universe.StellarSdk.Keypair.fromSecret(this.state.passphrase);\n            // sourceAccount = await stellarServer.loadAccount(pairSource.publicKey())\n          }catch(err){\n            // // problem with account \n            // errors.push('The seed stellar account does not exist!');\n            // sourceAccount = null;\n          }\n          \n          console.log('pairSource:', pairSource);\n      \n          // validate that Identity is available (or already owned)\n          // - should be a nonexistant account (or have my sourcePublicKey as a signer) \n          // - TODO: \"rent\" via smart contracts \n      \n          let pkTargetSeed = universe.jsSHA256.array(username);\n          var pairTarget = universe.StellarSdk.Keypair.fromRawEd25519Seed(pkTargetSeed);\n      \n          let targetAccount;\n          try {\n            targetAccount = await stellarServer.loadAccount(pairTarget.publicKey())\n            console.log('targetAccount:', targetAccount);\n      \n            let sourceIsSigner = universe.lodash.find(targetAccount.signers,{public_key: pairSource ? pairSource.publicKey():'skip'});\n            if(sourceIsSigner){\n              // login success \n              console.log('login success!');\n              \n              // Insert Node \n              let newNode = {\n                type: 'username_passphrase:Qm3298f',\n                data: {\n                  username: username,\n                  passphrase: this.state.passphrase\n                }\n              };\n              await universe.newNode(newNode);\n              \n              \n              // // re-fetch default nodes \n              // await this.fetchDefaultNodes();\n              // await this.checkAccountLoggedIn();\n              \n              this.setState({\n                isLoggingIn: false\n              });\n            \n              try {\n                universe.EE.emit('recheck-login', '');\n              }catch(err){\n                console.error('recheck login failed:', err);\n              }\n              \n            } else {\n              // login failed\n              console.error('login failed1'); \n              \n              this.setState({\n                isLoggingIn: false\n              });\n            \n            \n            }\n        \n          }catch(err){\n            // login failed (targetAccount doesnt exist?)\n            console.error('login failed2', err); \n            \n            this.setState({\n              isLoggingIn: false\n            });\n          \n          }\n      \n          \n            \n        }\n        \n        @autobind\n        render(){\n        \n          return (\n            <div>\n              \n              <h3 className=\"title is-5\">\n                Login\n              </h3>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" placeholder=\"Username\" value={this.state.username} onChange={e=>this.setState({username:e.target.value})} onKeyDown={this.handleKeyDown} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" placeholder=\"Passphrase\" value={this.state.passphrase} onChange={e=>this.setState({passphrase:e.target.value})} onKeyDown={this.handleKeyDown} />\n                </div>\n              </div>\n              <div>\n                <span className={\"button is-info \" + (this.state.isLoggingIn ? 'is-loading':'')} onClick={this.handleLoginClick}>\n                  Login\n                </span>\n              </div>\n                    \n            </div>\n          );\n            \n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "PartialLoginComponent"
  }
}